output: default
groups: {}
asyncFuncTimeout: 1000
functions:
  - id: regex_extract
    filter: sourcetype==='nagios'
    disabled: null
    conf:
      source: _raw
      iterations: 100
      overwrite: false
      regex: /(?<__host>\S+) is (?<__state>\w+)$/
  - id: drop
    filter: __host !== 'auth3.cribl.io'
    disabled: true
    conf: {}
  - id: code
    filter: "sourcetype==='nagios' "
    disabled: null
    conf:
      maxNumOfIterations: 5000
      code: |-
        /*
        ** Requires some setup: 
        ** C.vars.prev needs to be created in the Global Variables via 
        ** the UI as an object with the value of {}.
        */

        // set some vars up to make the logic more readable
        let ns = __e['__host'];
        let state = __e['__state'];

        /* C.vars.prev[ns] should be the state value of the previous event 
        ** that had the same value of __host. If not, or if it doesn't exist
        ** (first time seeing this __host), we consider it a "new state". 
        ** Otherwise, it's "no change" 
        */
        if (ns in C.vars.prev) {
          if ( C.vars.prev[ns] === state) {
            __e['__stateflag'] = "no change";
          } else {
            __e['__stateflag'] = "new state";
            C.vars.prev[ns] = state;
          }
        } else {
          __e['__stateflag'] = "new state"
          C.vars.prev[ns] = state;
          __e['__postcheck'] = C.vars.prev[ns];

        }
    final: false
  - id: drop
    filter: __stateflag==='no change'
    disabled: false
    conf: {}
